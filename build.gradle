// For those who want the bleeding edge
buildscript {
	repositories {
		jcenter()
		maven {
			name = "forge"
			url = "https://files.minecraftforge.net/maven"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:3+'
	}
}

plugins {
	id 'com.matthewprenger.cursegradle' version '1.2.0'
	id "com.github.ben-manes.versions" version "0.21.0" // Provides dependencyUpdates task.
}

apply plugin: 'net.minecraftforge.gradle'

version = mc_version + "-" + mod_version
group = "org.squiddev"
archivesBaseName = "plethora"

project.ext.integration = [
		'appliedenergistics',
		'astralsorcery',
		'baubles',
		'blockcraftery',
		'buildcraft',
		'cbmp',
		'chickens',
		'cyclic',
		'enderio',
		'extrautilities',
		'forestry',
		'hatchery',
		'ic2',
		'industrialforegoing',
		'jei',
		'mcmultipart',
		'notenoughwands',
		'refinedstorage',
		'rf',
		'roost',
		'storagedrawers',
		'tconstruct',
		'tesla',
		'thermalexpansion',
		'xnet',
] as LinkedHashSet
project.ext.disabled_integration = [] as LinkedHashSet
project.ext.enabled_integration = project.ext.integration.findAll { !project.ext.disabled_integration.contains(it) } as LinkedHashSet

sourceSets {
	common {
		java.srcDirs = ['src/main/java']
		resources.srcDirs = ['src/main/resources']
	}
	main {
		java.srcDirs = []
		resources.srcDirs = []
		compileClasspath += common.output
	}
	project.ext.enabled_integration.forEach { integrationSourceSet(it) }
}

def integrationSourceSet(String id) {
	def niceId = id.capitalize()
	def ss = sourceSets.create("integration${niceId}") {
		java.srcDirs = ["src/integration/${id}/java"]
		resources.srcDirs = ["src/integration/${id}/resources"]
		compileClasspath += sourceSets.common.output
	}
	sourceSets.main.compileClasspath += ss.output
}

minecraft {
	mappings channel: project.mappings_channel, version: project.mappings_version
//	replace '${mod_version}', project.mod_version
//	replace '${mc_version}', project.mc_version
//	replace '${cct_version}', project.cct_version
//	replace '${forge_version}', project.forge_version
	runs {
		client {
			workingDirectory project.file('run')
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			property 'forge.logging.console.level', 'debug'
			// Added for mods that have per-player data, e.g. Astral Sorcery
			args '--username', 'PlethoraDev'

			mods {
				plethora {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			property 'forge.logging.console.level', 'debug'

			mods {
				plethora {
					source sourceSets.main
				}
			}
		}

		testServer {
			parent server
			workingDirectory project.file('test-files/server')
			main 'org.squiddev.plethora.boostrap.LaunchServer'
			property 'fml.queryResult', 'confirm'

			mods {
				plethora {
					source sourceSets.main
					source sourceSets.test
				}
			}
		}
	}
}

jar {
	manifest {
		attributes(
			'FMLAT': 'Plethora_at.cfg',
		)
	}

	exclude "**/*.java"
}

configurations {
	project.ext.integration.forEach {
		def configImplementation = configurations.create("${it}Implementation") as Configuration
		def configCompileOnly = configurations.create("${it}CompileOnly") as Configuration
		def configRuntimeOnly = configurations.create("${it}RuntimeOnly") as Configuration
		def types = ['implementation', 'compileOnly', 'runtimeOnly']
		if (project.ext.enabled_integration.contains(it)) {
			types.forEach{ type ->
				configurations["common${type.capitalize()}"].extendsFrom configImplementation
				configImplementation.extendsFrom configurations[type] as Configuration
				configImplementation.extendsFrom configurations["test${type.capitalize()}"] as Configuration
			}
		}
	}
}

repositories {
	jcenter()

	maven {
		url 'https://www.cursemaven.com'
		content {
			includeGroup 'curse.maven'
		}
	}
	maven { url 'https://chickenbones.net/maven/' } // CBMP
	maven { url 'https://dvs1.progwml6.com/files/maven/' } // JEI + Tinker's
	//maven { url 'http://dyonovan.com/maven2/' } // Industrial Foregoing
	maven { url 'https://maven.ic2.player.to/' } // IC2 + Forestry
	maven { url 'https://dl.bintray.com/squiddev/maven/' } // ConfigGen (why do I use this still?)
	maven { url 'https://maven.amadornes.com/' } // Multipart
	maven { url 'https://maven.blamejared.com/' } // Botania
	maven { url 'https://maven.cil.li/' } // OpenComputers
	maven { url 'https://maven.covers1624.net/' } // CoFH
	maven { url 'https://maven.k-4u.nl/' } // McJty's mods
	//maven { url 'https://maven.mcmoddev.com/' } // Tesla
	maven { url 'https://maven.shadowfacts.net' } // Forgelin
	maven { url 'https://mod-buildcraft.com/maven/' } // Buildcraft
	maven { url 'https://maven.hellfiredev.net/' } // Astral Sorcery
	maven { url 'https://squiddev.cc/maven/' } // CC: Tweaked
	maven { url 'https://minecraft.curseforge.com/api/maven/' } // Everything else
}

dependencies {
	minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"
	commonImplementation fg.deobf("org.squiddev:cc-tweaked-${project.mc_version}:${project.cct_version}")

	commonCompileOnly fg.deobf("mezz.jei:jei_1.12.2:4.16.1.301:api")
	commonRuntimeOnly fg.deobf("mezz.jei:jei_1.12.2:4.16.1.301")

	// External mods with maven dependencies. Have fun when the next version of Minecraft drops!
	appliedenergisticsImplementation "appeng:appliedenergistics2:rv6-stable-6"
	commonImplementation "codechicken:ChickenASM:1.12-1.0.2.9"
	commonImplementation "codechicken:CodeChickenLib:1.12.2-3.2.2.354:universal"
	commonImplementation("codechicken:ForgeMultipart:1.12.2-2.6.1.81:universal") { transitive = false }
	commonImplementation("cofh:CoFHCore:1.12.2-4.6.2.25:universal") { transitive = false }
	commonImplementation "cofh:RedstoneFlux:1.12-2.1.0.7:universal"
	commonImplementation("cofh:ThermalExpansion:1.12.2-5.5.3.41:universal") { transitive = false }
	commonImplementation "cofh:ThermalFoundation:1.12.2-2.6.2.26:universal"
	commonImplementation "cofh:CoFHWorld:1.12.2-1.3.0.6:universal"
	//commonImplementation("com.buuz135.industrial.IndustrialForegoing:industrialforegoing:1.12.2-1.5.13-136") { transitive = false }
	commonCompileOnly("com.enderio:EnderIO:1.12.2-5.0.43") { transitive = false }
	commonCompileOnly "com.enderio.core:EnderCore:1.12.2-0.5.57" // EnderCore appears to crash in a development environment.
	commonImplementation("com.github.mcjty:mcjtylib:1.12-3.5.0") { transitive = false }
	commonImplementation("com.github.mcjty:rftools:1.12-7.70") { transitive = false }
	commonImplementation("com.github.mcjty:xnet:1.12-1.8.0") { transitive = false }
	commonImplementation "com.mod-buildcraft:buildcraft-all:7.99.22"
	commonImplementation "hellfirepvp.astralsorcery:astralsorcery:1.12.2-1.10.18-v129"
	commonImplementation "li.cil.oc:OpenComputers:MC1.12.2-1.7.5.192"
	commonImplementation "MCMultiPart2:MCMultiPart:2.5.3"
	//commonImplementation "net.darkhax.tesla:Tesla-1.12.2:1.0.63"
	commonImplementation "net.industrial-craft:industrialcraft-2:2.8.146-ex112"
	commonImplementation "net.sengir.forestry:forestry_1.12.2:5.8.2.387:api"
	commonImplementation "net.sengir.forestry:forestry_1.12.2:5.8.2.387"
	commonImplementation "refinedstorage:refinedstorage:1.6.13-364"
	commonImplementation "slimeknights:TConstruct:1.12.2-2.12.0.116"
	commonImplementation "slimeknights.mantle:Mantle:1.12-1.3.3.51"
	commonImplementation "vazkii.botania:Botania:r1.10-362.77"
	//commonImplementation "net.ndrei:tesla-core-lib:1.12.2-1.0.15.16:deobf"

	// All the Curse mods
	commonImplementation "baubles:Baubles:1.12:1.5.2"
	commonImplementation "storage-drawers:StorageDrawers:1.12.2:5.3.8"
	commonImplementation "chameleon:Chameleon:1.12:4.1.3"
	commonImplementation "blockcraftery:blockcraftery:1.12.2:1.2.0"
	commonImplementation "mysticallib:mysticallib:1.12.2:1.1.1"
	commonImplementation "roost:roost:1.12:1.3.0"
	commonImplementation "chickens:chickens:6.0.4"
	commonImplementation "hatchery:hatchery:1.12.2:2.2.1"
	commonImplementation "cyclic:Cyclic:1.12.2:1.19.9"
	commonImplementation "extra-utilities:extrautils2:1.12:1.9.9"
	commonImplementation "not-enough-wands:notenoughwands:1.12:1.8.1"
	commonImplementation "buildcraft:buildcraft:all:7.99.24.4"

	// Curse Maven
	commonImplementation 'curse.maven:industrial-foregoing-266515:2745321' // 1.12.13-237
	commonImplementation 'curse.maven:tesla-core-lib-254602:2891841' // 1.0.17.25
	commonImplementation 'curse.maven:tesla-244651:2487959' // 1.0.63

	compileOnly('org.squiddev:ConfigGen:1.2.5') { exclude group: 'net.minecraftforge' }

	// compileOnly "org.squiddev:forgelint:0.1.1"
	compileOnly "com.google.errorprone:error_prone_annotations:2.0.21"

	testImplementation 'junit:junit:4.11'

	project.ext.enabled_integration.forEach {
		add "${it}Implementation", sourceSets.common.output
		implementation sourceSets["integration${it.capitalize()}"].output
	}
}

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "mod_version", project.mod_version
	inputs.property "mc_version", project.mc_version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'mod_version': mod_version, 'mc_version': mc_version
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

gradle.projectsEvaluated {
	tasks.withType(JavaCompile) {
		options.compilerArgs << "-Xlint" << "-Xlint:-rawtypes" << "-Xlint:-processing" << "-parameters"
	}
}

// Not quite ready for common usage, but helped a lot in checking stuff
// compileJava { options.compilerArgs << "-Xplugin:ForgeLint" }

curseforge {
	apiKey = project.hasProperty('curseForgeApiKey') ? project.curseForgeApiKey : ''

	project {
		id = '248425'
		releaseType = 'release'
		changelog = "Release notes can be found on the GitHub repository (https://github.com/SquidDev-CC/plethora/releases/tag/v${project.version})."

		 relations {
			 requiredLibrary 'cc-tweaked'
		 }
	}
}

